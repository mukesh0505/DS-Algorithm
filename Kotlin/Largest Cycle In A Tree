/*

https://www.hackerearth.com/practice/data-structures/trees/binary-and-nary-trees/practice-problems/approximate/largest-cycle-in-a-tree-9113b3ab/

Problem
You are given a tree of  nodes and  edges. Now you need to select two nodes  and  in the tree such that the cycle that will be formed after adding an edge between the two nodes  and , its length should be maximum. If there are more than one possible answers, you can output any of them.

Input
The first line contains an integer  as input. Next  lines contain a pair of integers  that denote there is an edge between the two nodes  and  in the tree.

Output
In the output, you need to print two integers separated by space which denote the nodes between which you can add the edge so as to maximize the length of the cycle in the tree.

Constraints


Sample Input
7
1 2
1 3
2 4
2 5
3 6
3 7
Sample Output
4 6
Time Limit: 2
Memory Limit: 256
Source Limit:
Explanation
If you add an edge between the nodes 4 and 6 then you see that it forms the largest cycle in the tree. Some other possible outputs are -  5 6 or 5 7.
*/


import java.util.*
import kotlin.collections.ArrayList

class LargestCycleInATree(private val matrix: Array<ArrayList<Int>>) {

    private var farthestNode = -1
    private var total = 0
    private val visited = Array(matrix.size) { false }

    fun findLargestCycle(startingIndex: Int): Int {
        val stack = Stack<Int>()
        visited[startingIndex] = true
        stack.push(startingIndex)

        while (stack.isNotEmpty()) {
            val top = stack.peek()
            for (node in matrix[top]) {
                if (visited[node].not()) {
                    stack.push(node)
                    visited[node] = true
                    break
                }
            }
            if (top == stack.peek()) {
                if (stack.size > total) {
                    total = stack.size
                    farthestNode = top
                }
                stack.pop()
            }
        }
        return farthestNode
    }
}

fun main() {
    val n = readLine()!!.toInt()
    val matrix = Array(n + 1) {
        ArrayList<Int>()
    }

    // Create matrix for connected edges
    repeat(n - 1) {
        val (a, b) = readLine()!!.trim().split(" ").map { it.toInt() }
        matrix[a].add(b)
        matrix[b].add(a)
    }
    val firstNode = LargestCycleInATree(matrix).findLargestCycle(1)
    val secondNode = LargestCycleInATree(matrix).findLargestCycle(firstNode)
    println("$firstNode $secondNode")
}
